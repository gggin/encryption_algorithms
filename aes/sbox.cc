//
// Created by Gin Liu on 2018/11/20.
//

#include "sbox.h"
#include "../catch.hpp"
#include "matrix.h"
#include <cstdint>
#include <vector>

const uint8_t kSbox[256] = {
    0x63, 0x7C, 0x77, 0x7B, 0xF2, 0x6B, 0x6F, 0xC5, 0x30, 0x01, 0x67, 0x2B,
    0xFE, 0xD7, 0xAB, 0x76, 0xCA, 0x82, 0xC9, 0x7D, 0xFA, 0x59, 0x47, 0xF0,
    0xAD, 0xD4, 0xA2, 0xAF, 0x9C, 0xA4, 0x72, 0xC0, 0xB7, 0xFD, 0x93, 0x26,
    0x36, 0x3F, 0xF7, 0xCC, 0x34, 0xA5, 0xE5, 0xF1, 0x71, 0xD8, 0x31, 0x15,
    0x04, 0xC7, 0x23, 0xC3, 0x18, 0x96, 0x05, 0x9A, 0x07, 0x12, 0x80, 0xE2,
    0xEB, 0x27, 0xB2, 0x75, 0x09, 0x83, 0x2C, 0x1A, 0x1B, 0x6E, 0x5A, 0xA0,
    0x52, 0x3B, 0xD6, 0xB3, 0x29, 0xE3, 0x2F, 0x84, 0x53, 0xD1, 0x00, 0xED,
    0x20, 0xFC, 0xB1, 0x5B, 0x6A, 0xCB, 0xBE, 0x39, 0x4A, 0x4C, 0x58, 0xCF,
    0xD0, 0xEF, 0xAA, 0xFB, 0x43, 0x4D, 0x33, 0x85, 0x45, 0xF9, 0x02, 0x7F,
    0x50, 0x3C, 0x9F, 0xA8, 0x51, 0xA3, 0x40, 0x8F, 0x92, 0x9D, 0x38, 0xF5,
    0xBC, 0xB6, 0xDA, 0x21, 0x10, 0xFF, 0xF3, 0xD2, 0xCD, 0x0C, 0x13, 0xEC,
    0x5F, 0x97, 0x44, 0x17, 0xC4, 0xA7, 0x7E, 0x3D, 0x64, 0x5D, 0x19, 0x73,
    0x60, 0x81, 0x4F, 0xDC, 0x22, 0x2A, 0x90, 0x88, 0x46, 0xEE, 0xB8, 0x14,
    0xDE, 0x5E, 0x0B, 0xDB, 0xE0, 0x32, 0x3A, 0x0A, 0x49, 0x06, 0x24, 0x5C,
    0xC2, 0xD3, 0xAC, 0x62, 0x91, 0x95, 0xE4, 0x79, 0xE7, 0xC8, 0x37, 0x6D,
    0x8D, 0xD5, 0x4E, 0xA9, 0x6C, 0x56, 0xF4, 0xEA, 0x65, 0x7A, 0xAE, 0x08,
    0xBA, 0x78, 0x25, 0x2E, 0x1C, 0xA6, 0xB4, 0xC6, 0xE8, 0xDD, 0x74, 0x1F,
    0x4B, 0xBD, 0x8B, 0x8A, 0x70, 0x3E, 0xB5, 0x66, 0x48, 0x03, 0xF6, 0x0E,
    0x61, 0x35, 0x57, 0xB9, 0x86, 0xC1, 0x1D, 0x9E, 0xE1, 0xF8, 0x98, 0x11,
    0x69, 0xD9, 0x8E, 0x94, 0x9B, 0x1E, 0x87, 0xE9, 0xCE, 0x55, 0x28, 0xDF,
    0x8C, 0xA1, 0x89, 0x0D, 0xBF, 0xE6, 0x42, 0x68, 0x41, 0x99, 0x2D, 0x0F,
    0xB0, 0x54, 0xBB, 0x16};

std::vector<uint8_t> m = {
    1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0,
    1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1,
    1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1,
};
std::vector<uint8_t> m2 = {1, 1, 0, 0, 0, 1, 1, 0};
// std::vector<uint8_t> m2 = {0, 1, 1, 0, 0, 0, 1, 1};

using MT = Matrix<8, 8, uint8_t>;
using MT2 = Matrix<8, 1, uint8_t>;
MT x;
MT2 c;
int g_nouse = ([]() -> int {
  memcpy(x.data, m.data(), MT::byte_count);
  memcpy(c.data, m2.data(), MT2::byte_count);
  return 0;
})();

uint8_t GetInverse(uint8_t x) {
  int tx = x;
  for (int i = 0; i < 253; ++i) {
    x = gmult(x, tx);
  }
  return x;
}

uint8_t SBoxTr(uint8_t n) {
  n = GetInverse(n);
  std::vector<uint8_t> tt;
  tt.push_back((uint8_t)((n & 0x1)));
  tt.push_back((uint8_t)((n & 0x2) >> 1));
  tt.push_back((uint8_t)((n & 0x4) >> 2));
  tt.push_back((uint8_t)((n & 0x8) >> 3));
  tt.push_back((uint8_t)((n & 0x10) >> 4));
  tt.push_back((uint8_t)((n & 0x20) >> 5));
  tt.push_back((uint8_t)((n & 0x40) >> 6));
  tt.push_back((uint8_t)((n & 0x80) >> 7));
  //  std::reverse(tt.begin(), tt.end());
  Matrix<8, 1, uint8_t> a;
  memcpy(a.data, tt.data(), decltype(a)::byte_count);
  //  x.Print("x");
  //  a.Print("a");
  auto y = Mul<8, 8, 1, uint8_t, AddOp, MulOp>(x, a);
  //  y.Print("y");
  //  c.Print("c");
  auto r = Add<8, 1, uint8_t, AddOp>(y, c);
  //  r.Print("r");
  //  uint8_t kk = r.data[3][0] << 0 | r.data[2][0] << 1 | r.data[1][0] << 2 |
  //               r.data[0][0] << 3 | r.data[7][0] << 4 | r.data[6][0] << 5 |
  //               r.data[5][0] << 6 | r.data[4][0] << 7;

  uint8_t kk = r.data[0][0] << 0 | r.data[1][0] << 1 | r.data[2][0] << 2 |
               r.data[3][0] << 3 | r.data[4][0] << 4 | r.data[5][0] << 5 |
               r.data[6][0] << 6 | r.data[7][0] << 7;
  return kk;
}

std::vector<uint8_t> BuildSbox() {
  std::vector<uint8_t> sbox;
  for (size_t i = 0; i < 256; ++i) {
    sbox.push_back(SBoxTr(i));
  }
  return sbox;
}

uint8_t ginv(uint8_t a) {
  uint8_t j, b = a;
  for (j = 14; --j;)             /* for j from 13 downto 1 */
    b = gmult(b, j & 1 ? b : a); /* alternatively square and multiply */
  return b;
}

TEST_CASE("inverse", "[sbox]") {
  REQUIRE(0xca == GetInverse(0x53));
  REQUIRE(0xca == ginv(0x53));
}

TEST_CASE("basic tr", "[sbox]") {
  auto x = SBoxTr(0x53);
  REQUIRE(x == 0xed);
  auto z = SBoxTr(0x64);
  REQUIRE(z == 0x43);
}

void SboxTr(Matrix<4, 4, uint8_t> &m) {
  static auto sbox = std::move(BuildSbox());
  for (size_t i = 0; i < 4; ++i) {
    for (size_t j = 0; j < 4; ++j) {
      m.data[i][j] = sbox[m.data[i][j]];
    }
  }
}
